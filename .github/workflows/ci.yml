name: All

on:
  pull_request:
  push:
    branches:
      - dev
      - master
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  check_style:
    name: "Code Quality"
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          export PATH=$HOME/.local/bin:$PATH
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Poetry
        run: |
          pip install --upgrade poetry

      - name: Versions
        run: |
          echo "Working Directory: $PWD"
          echo "Home: $HOME"
          echo "Path: $PATH"
          python --version
          pip --version
          poetry --version

      - name: Cache Poetry Virtual Environments
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Poetry check
        run: |
          poetry check

      - name: Poetry configuration
        run: |
          poetry config --local virtualenvs.in-project false
          poetry config --local virtualenvs.path ~/.virtualenvs

      - name: Install with Poetry
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Check linting and formatting
        run: ./runner lint

      - name: Check build (sdist/wheel)
        run: ./runner build

  docs:
    name: "Docs"
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          export PATH=$HOME/.local/bin:$PATH
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Poetry
        run: |
          pip install --upgrade poetry

      - name: Versions
        run: |
          echo "Working Directory: $PWD"
          echo "Home: $HOME"
          echo "Path: $PATH"
          python --version
          pip --version
          poetry --version

      - name: Cache Poetry virtual environments
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.virtualenvs
            docs/source/sphinx_gallery_examples
            docs/jupyter_execute
            docs/build/plot_directive
            docs/build/rst
          key: poetry-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Poetry configuration
        run: |
          poetry config --local virtualenvs.in-project false
          poetry config --local virtualenvs.path ~/.virtualenvs

      - name: Install with Poetry
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Build documentation
        run: ./runner docs

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v2.2.2
        with:
          name: docs
          path: docs/build

  pip_tests:
    name: "Unpinned Tests"
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install pytest
        run: |
          export PATH=$HOME/.local/bin:$PATH
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade pytest pytest-benchmark

      - name: Versions
        run: |
          echo "Working Directory: $PWD"
          echo "Home: $HOME"
          echo "Path: $PATH"
          python --version
          pip --version
          pytest --version

      - name: Install with pip
        run: pip install .

      - name: Run pytest
        run: pytest

  tests:
    name: "Pinned Tests"
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          export PATH=$HOME/.local/bin:$PATH
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Poetry
        run: |
          pip install --upgrade poetry

      - name: Versions
        run: |
          echo "Working Directory: $PWD"
          echo "Home: $HOME"
          echo "Path: $PATH"
          python --version
          pip --version
          poetry --version

      - name: Cache Poetry Virtual Environments
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Poetry configuration
        run: |
          poetry config --local virtualenvs.in-project false
          poetry config --local virtualenvs.path ~/.virtualenvs

      - name: Install with Poetry
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Run pytest
        env:
          CI: 1
        run: ./runner test

      - name: Upload coverage data
        uses: "actions/upload-artifact@v2.2.2"
        with:
          name: coverage-data
          path: ".cache/coverage.*"

  coverage:
    name: "Coverage Reports"
    needs: tests
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          export PATH=$HOME/.local/bin:$PATH
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Poetry
        run: |
          pip install --upgrade poetry

      - name: Versions
        run: |
          echo "Working Directory: $PWD"
          echo "Home: $HOME"
          echo "Path: $PATH"
          python --version
          pip --version
          poetry --version

      - name: Cache Poetry Virtual Environments
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Poetry configuration
        run: |
          poetry config --local virtualenvs.in-project false
          poetry config --local virtualenvs.path ~/.virtualenvs

      - name: Install with Poetry
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Download coverage data
        uses: actions/download-artifact@v2.0.8
        with:
          name: coverage-data
          path: .cache/

      - name: Directory structure
        run: |
          echo "-----------------------------------------------------------------------------------"
          echo "Files (ls -a *):"
          echo "-----------------------------------------------------------------------------------"
          ls -a *

      - name: Combine coverage data and display human readable report
        run: |
          poetry run coverage combine
          poetry run coverage report

      - name: Create coverage report
        run: poetry run coverage xml
